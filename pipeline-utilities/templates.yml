# Template for all build jobs
.build-template:
  before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
  - export CI_COMMIT_REF_NAME=$(echo "$CI_COMMIT_REF_NAME" | tr '[:upper:]' '[:lower:]')
  - if [[ $CI_COMMIT_REF_NAME = $CI_DEFAULT_BRANCH ]]; then DOCKER_TAG=latest; else DOCKER_TAG=$CI_COMMIT_REF_NAME; fi

# Extends the base build template for the main build stage
.build-apps:
  extends: .build-template
  stage: build
  image: $CI_REGISTRY_IMAGE/builder:latest
  variables:
    REACT_FOLDER: "rekurrens.client"
    DOTNET_FOLDER: "Rekurrens.Server"

# Generate and publish a new Dockerimage of our .NET-application
# Runs on any change in back-end folder
.build-dotnet:
  extends: .build-apps
  script:
  - cp "$PIPELINE_UTILS"/dotnet/Dockerfile-dotnet "$DOTNET_FOLDER"
  - cp "$REACT_FOLDER"/rekurrens.client.esproj "$DOTNET_FOLDER"
  - cd "$DOTNET_FOLDER"
  - envsubst <appsettings-secrets.json >appsettings.json
  - cat appsettings.json
  - export IMAGE_NAME="$CI_REGISTRY_IMAGE/dotnet:$DOCKER_TAG"
  - echo "Building $IMAGE_NAME"
  - docker buildx build --cache-from="$IMAGE_NAME" -t "$IMAGE_NAME" --push -f Dockerfile-dotnet .
  rules:
  - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  - if: $CI_MERGE_REQUEST_ID
    changes:
    - $DOTNET_FOLDER/**/*
    - $REACT_FOLDER/rekurrens.client.esproj

# Generate and publish a new Dockerimage of our React-application
# Runs on any change in front-end folder
.build-react:
  extends: .build-apps
  script:
  - cp "$PIPELINE_UTILS"/react/* "$REACT_FOLDER"
  - cd "$REACT_FOLDER"
  - export IMAGE_NAME="$CI_REGISTRY_IMAGE/react:$DOCKER_TAG"
  - echo "Building $IMAGE_NAME"
  - docker buildx build --cache-from="$IMAGE_NAME" -t "$IMAGE_NAME" --push -f Dockerfile-react .
  rules:
  - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  - if: $CI_MERGE_REQUEST_ID
    changes:
    - $REACT_FOLDER/**/*

# Generates an image of MSSQL and loads specified state from SQL file
# Runs on any change to SQL-file
.build-db:
  extends: .build-apps
  script:
  - cd "$PIPELINE_UTILS"/mssql
  - export IMAGE_NAME="$CI_REGISTRY_IMAGE/mssql-db:$DOCKER_TAG"
  # Main branch use prod init, MR use dev init
  - if [[ $CI_COMMIT_REF_NAME = $CI_DEFAULT_BRANCH ]]; then mv prod-db-init.sql db-init.sql; else mv dev-db-init.sql db-init.sql; fi
  - echo "Building $IMAGE_NAME"
  - docker buildx build --cache-from="$IMAGE_NAME" -t "$IMAGE_NAME" --push -f Dockerfile-db .
  rules:
  - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  - if: $CI_MERGE_REQUEST_ID
    changes:
    - $PIPELINE_UTILS/mssql/*
